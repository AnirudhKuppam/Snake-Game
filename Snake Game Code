import turtle
import time
import random

#as the snake gets longer the drawings get slower in turtle modeule use pygame instead
delay = 0.1

#score
score = 0
high_score = 0

#Setting up the screen
wn = turtle.Screen()
wn.title("Snake Game By Anirudh Kuppam")
wn.bgcolor("yellow")
wn.setup(width = 600,height = 600)
wn.tracer(0) #turns off the animation on the screen that is the screen updates

#snake head
head = turtle.Turtle()
head.speed(0) #this is speed of the animation not the speed of snake
head.shape("square")
head.color("black")
head.penup() #bcoz it does not draw anything on the path it moves
head.goto(0,0) #snake head starts at the centre of the screen
head.direction = 'stop'

#snake food
food = turtle.Turtle()
food.speed(0) #this is speed of the animation not the speed of snake
food.shape("circle")
food.color("red")
food.penup() #bcoz it does not draw anything on the path it moves
food.goto(0,100) #snake food starts at the centre of the screen

segments = []

#pen
pen = turtle.Turtle()
pen.speed(0) #animation speed
pen.shape("square")
pen.color("black")
pen.penup() #so it does not draw on the screen
pen.hideturtle()
pen.goto(0,260)
pen.write("Score : 0  High Score : 0",align = "center",font=("Courier",24,"normal"))

#Functions
def go_up():
    if head.direction != 'down':
        head.direction = 'up'
def go_down():
    if head.direction != 'up':
        head.direction = 'down'
def go_right():
    if head.direction != 'left':
        head.direction = 'right'
def go_left():
    if head.direction != 'right':
        head.direction = 'left'

def move():
    if head.direction == 'up':
        y = head.ycor()
        head.sety(y+20)
    if head.direction == 'down':
        y = head.ycor()
        head.sety(y-20)
    if head.direction == 'right':
        x = head.xcor()
        head.setx(x+20)
    if head.direction == 'left':
        x = head.xcor()
        head.setx(x-20)

#Keypad Bindings - It basically connect a key press to a particular function
wn.listen()
wn.onkeypress(go_up,"Up")
wn.onkeypress(go_down,"Down")
wn.onkeypress(go_right,"Right")
wn.onkeypress(go_left,"Left")

#Main Game Loop
while True:
    wn.update()
    #check for collision with the border
    if head.xcor()>290 or head.xcor()<-290 or head.ycor()>290 or head.ycor()<-290:
        time.sleep(1)   #we just pause the game for the said seconds
        head.goto(0,0)
        head.direction = 'stop'

        # Hide the segments
        for segment in segments:
            segment.goto(1000, 1000)
        
        # Clear the segments list
        segments.clear()

        # Reset the score
        score = 0

        # Reset the delay
        delay = 0.1

        pen.clear()
        pen.write("Score: {}  High Score: {}".format(score, high_score), align="center", font=("Courier", 24, "normal")) 

    #check for collision with the food
    if head.distance(food) < 20:
        #move the food to a random spot on the screen
        x = random.randint(-290,290)
        y = random.randint(-290,290)
        food.goto(x,y)

        #add a segment
        new_segment = turtle.Turtle()
        new_segment.speed(0) #animation speed
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup() #so that it does not draw on the screen
        segments.append(new_segment)

        #shorten the delay
        delay -= 0.001 #as the snake gets longer the speed increases

        #increase the score
        score += 10

        if score > high_score:
            high_score = score
            
        pen.clear()
        pen.write("Score : {}  High Score : {}".format(score,high_score),align = 'center',font=("Courier",24,"normal"))

    #move the end segments first in reverse order
    for index in range(len(segments)-1,0,-1):
        x = segments[index-1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x,y)

    #move segment 0 to where the head is
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x,y)

    move()

    #check for head collision with body segments
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = 'stop'

            #hide the segments
            for segment in segments:
                segment.goto(1000,1000) #as we can't delete the segment in turtle module

            #clear the segments list
            segments.clear() #or we can use this segments = []
            
            #reset the score
            score = 0

            #reset the delay
            delay = 0.1

            #update the score display
            pen.clear()
            pen.write("Score : {}  High Score : {}".format(score,high_score),align = 'center',font=("Courier",24,"normal"))

    time.sleep(delay)

wn.mainloop()
